import logging
from aiogram import types, F
from aiogram.fsm.context import FSMContext

from database import Database
from keyboards import *
from states import AdminStates
from regos_integration import REGOSIntegration
import os

logger = logging.getLogger(__name__)

db = Database()

REGOS_API_KEY = os.getenv("REGOS_API_KEY")
REGOS_API_URL = os.getenv("REGOS_API_URL")
regos = REGOSIntegration(api_key=REGOS_API_KEY, api_url=REGOS_API_URL)


class AdminHandlers:
    def __init__(self, bot):
        self.bot = bot

    # –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ú–ï–¢–û–î
    async def cmd_admin(self, message: types.Message, state: FSMContext):
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        await state.set_state(AdminStates.waiting_for_password)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async def check_admin_password(self, message: types.Message, state: FSMContext):
        ADMIN_PASSWORD = "admin123"

        if message.text == ADMIN_PASSWORD:
            await message.answer(
                "‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
                reply_markup=get_admin_keyboard()
            )
            await state.set_state(AdminStates.admin_menu)
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()

    async def start_add_product(self, message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminStates.adding_product_name)

    async def show_all_products(self, message: types.Message):
        products = db.get_all_products()
        text = "üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã:\n\n"

        for product in products:
            text += f"ID: {product['id']}\n"
            text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            text += f"–¶–µ–Ω–∞: {product['price']}—Å—É–º/{product['unit']}\n"
            text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}\n"
            text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n"
            text += "‚îÄ" * 20 + "\n"

        await message.answer(text)

    async def exit_admin(self, message: types.Message, state: FSMContext):
        await message.answer(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

    async def process_product_name(self, message: types.Message, state: FSMContext):
        await state.update_data(new_product_name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Å—É–º–º–∞—Ö):")
        await state.set_state(AdminStates.adding_product_price)

    async def process_product_price(self, message: types.Message, state: FSMContext):
        try:
            price = float(message.text)
            await state.update_data(new_product_price=price)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            await state.set_state(AdminStates.adding_product_quantity)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –≤ —Å—É–º–º–∞—Ö)")

    async def process_product_quantity(self, message: types.Message, state: FSMContext):
        try:
            quantity = int(message.text)
            await state.update_data(new_product_quantity=quantity)

            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_admin_keyboard())
            await state.set_state(AdminStates.adding_product_category)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")

    async def process_product_category(self, message: types.Message, state: FSMContext):
        category_name_with_emoji = message.text
        categories = db.get_categories()

        # –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —Å —ç–º–æ–¥–∑–∏
        category_id = None
        for cat in categories:
            if cat["name"] == category_name_with_emoji:
                category_id = cat["id"]
                break

        if not category_id:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è!")
            return

        await state.update_data(new_product_category=category_id)
        await message.answer(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ):",
            reply_markup=get_skip_photo_keyboard()
        )
        await state.set_state(AdminStates.adding_product_photo)

    async def skip_photo(self, message: types.Message, state: FSMContext):
        await self.add_product_to_db(message, state, None)

    async def process_product_photo(self, message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo = message.photo[-1] if message.photo else None
            
            if not photo:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
                
            file = await self.bot.get_file(photo.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_extension = file.file_path.split('.')[-1].lower()
            if file_extension not in ['jpg', 'jpeg', 'png', 'webp', 'gif']:
                await message.answer(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG, WEBP –∏–ª–∏ GIF"
                )
                return
                
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            photo_bytes = await self.bot.download_file(file.file_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from image_utils import process_image
            processed_image = process_image(
                photo_bytes.read(),
                max_size=(1200, 1200),
                quality=85
            )
            
            await self.add_product_to_db(message, state, processed_image)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            )

    async def add_product_to_db(self, message: types.Message, state: FSMContext, image_data):
        data = await state.get_data()

        product_id = db.add_product(
            data["new_product_name"],
            data["new_product_price"],
            data["new_product_quantity"],
            data["new_product_category"],
            image_data
        )

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['new_product_name']}\n"
            f"–¶–µ–Ω–∞: {data['new_product_price']}—Å—É–º\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['new_product_quantity']} –∫–≥\n"
            f"ID —Ç–æ–≤–∞—Ä–∞: {product_id}",
            reply_markup=get_admin_keyboard()
        )
        await state.set_state(AdminStates.admin_menu)

    async def start_edit_product(self, message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await state.set_state(AdminStates.editing_product)

    async def process_edit_product(self, message: types.Message, state: FSMContext):
        try:
            product_id = int(message.text)
            product = db.get_product(product_id)

            if not product:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            await state.update_data(editing_product_id=product_id)

            await message.answer(
                f"–¢–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                f"ID: {product['id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                f"–¶–µ–Ω–∞: {product['price']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}\n\n"
                f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                reply_markup=get_edit_product_keyboard()
            )

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")

    async def start_delete_product(self, message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        await state.set_state(AdminStates.deleting_product)

    async def process_delete_product(self, message: types.Message, state: FSMContext):
        try:
            product_id = int(message.text)
            product = db.get_product(product_id)

            if not product:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            success = db.delete_product(product_id)

            if success:
                await message.answer(
                    f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                    reply_markup=get_admin_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!",
                    reply_markup=get_admin_keyboard()
                )

            await state.set_state(AdminStates.admin_menu)

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")

    # admin.py - –∑–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    async def start_edit_product(self, message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await state.set_state(AdminStates.editing_product)

    async def process_edit_product(self, message: types.Message, state: FSMContext):
        try:
            product_id = int(message.text)
            product = db.get_product(product_id)

            if not product:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await state.update_data(editing_product_id=product_id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
            await message.answer(
                f"üì¶ –¢–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                f"ID: {product['id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                f"–¶–µ–Ω–∞: {product['price']}—Å—É–º\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}\n\n"
                f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                reply_markup=get_edit_product_keyboard()
            )

            await state.set_state(AdminStates.editing_product_select_field)

        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")

    # –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–û–õ–ï–ô:

    async def process_edit_field_selection(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        product_id = data.get("editing_product_id")
        product = db.get_product(product_id)

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.set_state(AdminStates.admin_menu)
            return

        field = message.text.lower()

        if field == "–Ω–∞–∑–≤–∞–Ω–∏–µ":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(AdminStates.editing_product_name)

        elif field == "—Ü–µ–Ω–∞":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Å—É–º–º–∞—Ö):", reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(AdminStates.editing_product_price)

        elif field == "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(AdminStates.editing_product_quantity)

        elif field == "–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_admin_keyboard())
            await state.set_state(AdminStates.editing_product_category)

        elif field == "—Ñ–æ—Ç–æ":
            await message.answer(
                "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ):",
                reply_markup=get_skip_photo_keyboard()
            )
            await state.set_state(AdminStates.editing_product_photo)

        elif field == "üîô –Ω–∞–∑–∞–¥":
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=get_admin_keyboard())
            await state.set_state(AdminStates.admin_menu)

        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    async def process_edit_product_name(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        product_id = data.get("editing_product_id")

        new_name = message.text
        self.update_product_field(product_id, "name", new_name)

        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}",
            reply_markup=get_admin_keyboard()
        )
        await state.set_state(AdminStates.admin_menu)

    async def process_edit_product_price(self, message: types.Message, state: FSMContext):
        try:
            new_price = float(message.text)
            data = await state.get_data()
            product_id = data.get("editing_product_id")

            self.update_product_field(product_id, "price", new_price)

            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_price}—Å—É–º",
                reply_markup=get_admin_keyboard()
            )
            await state.set_state(AdminStates.admin_menu)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)")

    async def process_edit_product_quantity(self, message: types.Message, state: FSMContext):
        try:
            new_quantity = int(message.text)
            data = await state.get_data()
            product_id = data.get("editing_product_id")

            self.update_product_field(product_id, "quantity", new_quantity)

            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_quantity}",
                reply_markup=get_admin_keyboard()
            )
            await state.set_state(AdminStates.admin_menu)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")

    async def process_edit_product_category(self, message: types.Message, state: FSMContext):
        category_name_with_emoji = message.text
        categories = db.get_categories()

        # –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —Å —ç–º–æ–¥–∑–∏
        category_id = None
        for cat in categories:
            if cat["name"] == category_name_with_emoji:
                category_id = cat["id"]
                break

        if not category_id:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è!")
            return

        data = await state.get_data()
        product_id = data.get("editing_product_id")

        self.update_product_field(product_id, "category_id", category_id)

        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {category_name_with_emoji}",
            reply_markup=get_admin_keyboard()
        )
        await state.set_state(AdminStates.admin_menu)

    async def process_edit_product_photo(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        product_id = data.get("editing_product_id")

        if message.text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
            self.update_product_field(product_id, "image", None)
            await message.answer(
                "‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–æ",
                reply_markup=get_admin_keyboard()
            )
        elif message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = message.photo[-1]
            file = await self.bot.get_file(photo.file_id)
            photo_bytes = await self.bot.download_file(file.file_path)

            self.update_product_field(product_id, "image", photo_bytes.read())
            await message.answer(
                "‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            return

        await state.set_state(AdminStates.admin_menu)

    def update_product_field(self, product_id: int, field: str, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = db.get_connection()
        cursor = conn.cursor()

        if value is None:
            cursor.execute(f'UPDATE products SET {field} = NULL WHERE id = ?', (product_id,))
        else:
            cursor.execute(f'UPDATE products SET {field} = ? WHERE id = ?', (value, product_id))

        conn.commit()
        conn.close()

    async def show_regos_orders_menu(self, message: types.Message):
        """Show REGOS orders management menu"""
        await message.answer(
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ REGOS",
            reply_markup=get_regos_orders_keyboard()
        )
        await AdminStates.regos_orders_menu.set()

    async def sync_regos_orders(self, message: types.Message):
        """Sync local orders with REGOS system"""
        msg = await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å REGOS...")
        
        try:
            results = regos.sync_orders(db)
            success_count = sum(1 for r in results if r['status'] == 'success')
            error_count = len(results) - success_count
            
            response = (
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}"
            )
            
            if error_count > 0:
                error_details = "\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n"
                for r in results:
                    if r['status'] == 'error':
                        error_details += f"–ó–∞–∫–∞–∑ #{r['order_id']}: {r['message']}\n"
                response += error_details
                
        except Exception as e:
            logger.error(f"Error syncing REGOS orders: {e}")
            response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å REGOS: {str(e)}"
            
        await msg.edit_text(response, reply_markup=get_regos_orders_keyboard())

    async def show_regos_order_status(self, message: types.Message, state: FSMContext):
        """Show status of a specific REGOS order"""
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:")
        await state.set_state(AdminStates.regos_check_order_status)

    async def process_regos_order_status(self, message: types.Message, state: FSMContext):
        """Process REGOS order status check"""
        try:
            order_id = int(message.text)
            order = db.get_order_by_id(order_id)
            
            if not order:
                await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            if not order.get('regos_order_id'):
                await message.answer("‚ùå –£ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ REGOS")
                return
                
            # Get status from REGOS
            status = regos.get_order_status(order['regos_order_id'])
            
            if not status:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ REGOS")
                return
                
            # Update local status
            db.update_regos_status(order_id, status.get('status', 'unknown'))
            
            # Format status message
            status_text = (
                f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –≤ REGOS:\n"
                f"‚Ä¢ ID –≤ REGOS: {order['regos_order_id']}\n"
                f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {status.get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
            
            if 'history' in status:
                status_text += "\n\nüìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:\n"
                for item in status['history']:
                    status_text += f"‚Ä¢ {item['status']} - {item['timestamp']}\n"
            
            await message.answer(status_text, reply_markup=get_regos_orders_keyboard())
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ (—á–∏—Å–ª–æ)")
            
    async def update_regos_order_status(self, message: types.Message, state: FSMContext):
        """Start process of updating REGOS order status"""
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<ID –∑–∞–∫–∞–∑–∞> <–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "42 in_progress"
        )
        await state.set_state(AdminStates.regos_update_order_status)
        
    async def process_update_regos_status(self, message: types.Message, state: FSMContext):
        """Process REGOS order status update"""
        try:
            parts = message.text.split(maxsplit=1)
            if len(parts) != 2:
                raise ValueError()
                
            order_id = int(parts[0])
            new_status = parts[1].strip()
            
            order = db.get_order_by_id(order_id)
            if not order:
                await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            if not order.get('regos_order_id'):
                await message.answer("‚ùå –£ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ REGOS")
                return
                
            # Update status in REGOS
            success = regos.update_order_status(
                order['regos_order_id'], 
                new_status,
                f"Status updated by admin via bot (Order #{order_id})"
            )
            
            if success:
                # Update local status
                db.update_regos_status(order_id, new_status)
                await message.answer(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'",
                    reply_markup=get_regos_orders_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ REGOS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
                    reply_markup=get_regos_orders_keyboard()
                )
                
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <ID –∑–∞–∫–∞–∑–∞> <–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å>"
            )

    # ... (rest of the file remains the same) ...
