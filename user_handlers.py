import os
import logging
from aiogram import Bot, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, time

from database import Database
from keyboards import *
from states import RegistrationStates, ShoppingStates, OrderStates

logger = logging.getLogger(__name__)

db = Database()

ADMIN_GROUP_ID = -1003161488318


class UserHandlers:
    def __init__(self, bot: Bot):
        self.bot = bot

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
    async def cmd_start(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user = db.get_user(user_id)

        if user:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['name']}! üëã",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤! üõí\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=get_phone_keyboard()
            )
            await state.set_state(RegistrationStates.waiting_for_phone)

    def is_valid_date(self, date_str: str) -> bool:
        try:
            input_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            today = datetime.now().date()
            return input_date >= today
        except ValueError:
            return False

    def is_valid_time(self, time_str: str) -> bool:
        try:
            datetime.strptime(time_str, "%H:%M")
            return True
        except ValueError:
            return False

    def is_valid_datetime_combination(self, date_str: str, time_str: str) -> bool:
        try:
            input_datetime = datetime.strptime(
                f"{date_str} {time_str}",
                "%d.%m.%Y %H:%M"
            )
            return input_datetime > datetime.now()
        except ValueError:
            return False

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò =====
    async def process_phone(self, message: types.Message, state: FSMContext):
        phone = message.contact.phone_number
        await state.update_data(phone=phone)

        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_name)

    async def process_name(self, message: types.Message, state: FSMContext):
        name = message.text
        user_data = await state.get_data()
        user_id = message.from_user.id

        db.add_user(user_id, name, user_data["phone"])

        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏!",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ =====
    async def show_catalog(self, message: types.Message, state: FSMContext):
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=get_categories_keyboard()
        )
        await state.set_state(ShoppingStates.selecting_category)

    async def show_cart(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        cart_items = db.get_user_cart(user_id)

        if not cart_items:
            await message.answer(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üòî\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            cart_text = "üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
            total = 0

            for item in cart_items:
                item_total = item["price"] * item["quantity"]
                total += item_total
                cart_text += f"‚Ä¢ {item['name']}: {item['quantity']} {item['unit']} √ó {item['price']}—Å—É–º = {item_total}—Å—É–º\n"

            cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Å—É–º"

            await message.answer(cart_text, reply_markup=get_cart_keyboard())
            await state.set_state(ShoppingStates.viewing_cart)

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ê–õ–û–ì–ê =====
    async def process_category(self, callback: types.CallbackQuery, state: FSMContext):
        category_id = int(callback.data.replace("category_", ""))
        products = db.get_products_by_category(category_id)

        if products:
            await callback.message.edit_text(
                f"–¢–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=get_products_keyboard(category_id)
            )
        else:
            await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)

        await state.set_state(ShoppingStates.selecting_product)

    async def process_product(self, callback: types.CallbackQuery, state: FSMContext):
        product_id = int(callback.data.replace("product_", ""))
        product = db.get_product(product_id)

        if product:
            await state.update_data(selected_product=product_id, quantity=0)

            if product["image"]:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                temp_filename = f"temp_{product_id}.jpg"
                with open(temp_filename, "wb") as f:
                    f.write(product["image"])

                with open(temp_filename, "rb") as photo_file:
                    photo = types.BufferedInputFile(
                        file=photo_file.read(),
                        filename=temp_filename
                    )
                    await callback.message.answer_photo(
                        photo=photo,
                        caption=f"üì¶ {product['name']}\n"
                                f"üí∞ –¶–µ–Ω–∞: {product['price']}—Å—É–º/{product['unit']}\n"
                                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {product['quantity']} {product['unit']}\n\n"
                                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                        reply_markup=get_quantity_keyboard(0)
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(temp_filename)
            else:
                await callback.message.edit_text(
                    f"üì¶ {product['name']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {product['price']}—Å—É–º/{product['unit']}\n"
                    f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {product['quantity']} {product['unit']}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                    reply_markup=get_quantity_keyboard(0)
                )

            await state.set_state(ShoppingStates.selecting_quantity)

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–ò–ß–ï–°–¢–í–ê =====
    async def quantity_minus(self, callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        quantity = max(0, data.get("quantity", 0) - 1)
        await state.update_data(quantity=quantity)

        await callback.message.edit_reply_markup(
            reply_markup=get_quantity_keyboard(quantity)
        )

    async def quantity_plus(self, callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        product_id = data.get("selected_product")
        product = db.get_product(product_id)

        if product:
            quantity = min(product["quantity"], data.get("quantity", 0) + 1)
            await state.update_data(quantity=quantity)

            await callback.message.edit_reply_markup(
                reply_markup=get_quantity_keyboard(quantity)
            )

    async def add_to_cart(self, callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        quantity = data.get("quantity", 0)

        if quantity == 0:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
            return

        user_id = callback.from_user.id
        product_id = data.get("selected_product")

        db.add_to_cart(user_id, product_id, quantity)

        await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ({quantity} –∫–≥)", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        try:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=get_categories_keyboard()
            )
        except:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=get_categories_keyboard()
            )
        await state.set_state(ShoppingStates.selecting_category)

    async def continue_shopping(self, callback: types.CallbackQuery, state: FSMContext):
        try:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=get_categories_keyboard()
            )
        except:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=get_categories_keyboard()
            )
        await state.set_state(ShoppingStates.selecting_category)

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–†–ó–ò–ù–´ –ò –û–§–û–†–ú–õ–ï–ù–ò–Ø =====
    async def back_to_catalog(self, message: types.Message, state: FSMContext):
        await self.show_catalog(message, state)

    async def start_checkout(self, message: types.Message, state: FSMContext):
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_for_date)

    async def process_delivery_date(self, message: types.Message, state: FSMContext):
        date = message.text.strip()

        if not self.is_valid_date(date):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023)"
            )
            return

        await state.update_data(delivery_date=date)
        current_time = datetime.now().strftime("%H:%M")

        await message.answer(
            f"üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_time}):\n"
            "‚Ä¢ –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: —Å 09:00 –¥–æ 22:00"
        )
        await state.set_state(OrderStates.waiting_for_time)

    async def process_delivery_time(self, message: types.Message, state: FSMContext):
        time_str = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if not self.is_valid_time(time_str):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                "–ü—Ä–∏–º–µ—Ä: 14:30"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-22:00)
        try:
            delivery_time = datetime.strptime(time_str, "%H:%M").time()
            if not (time(9, 0) <= delivery_time <= time(22, 0)):
                await message.answer(
                    "‚ùå –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å 09:00 –¥–æ 22:00. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
                )
                return
        except ValueError:
            pass  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        date_str = data.get('delivery_date')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if not self.is_valid_datetime_combination(date_str, time_str):
            await message.answer(
                "‚ùå –í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è."
            )
            return

        await state.update_data(delivery_time=time_str)

        await message.answer(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
            "‚Ä¢ –ò–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å/Google –∫–∞—Ä—Ç—ã",
            reply_markup=get_location_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_address)

    async def process_delivery_address(self, message: types.Message, state: FSMContext):
        if message.location:
            address = f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {message.location.latitude}, {message.location.longitude}"
        else:
            address = message.text

        await state.update_data(delivery_address=address)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        user_id = message.from_user.id
        user_info = db.get_user(user_id)
        cart_items = db.get_user_cart(user_id)
        data = await state.get_data()

        order_text = "üìã –í–∞—à –∑–∞–∫–∞–∑:\n\n"
        total = 0

        for item in cart_items:
            item_total = item["price"] * item["quantity"]
            total += item_total
            order_text += f"‚Ä¢ {item['name']}: {item['quantity']} {item['unit']} √ó {item['price']}—Å—É–º = {item_total}—Å—É–º\n"

        order_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Å—É–º\n"
        order_text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        order_text += f"üïê –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_time']}\n"
        order_text += f"üìç –ê–¥—Ä–µ—Å: {address}\n\n"
        order_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"

        await message.answer(order_text, reply_markup=get_confirm_order_keyboard())
        await state.set_state(OrderStates.confirming_order)

    async def confirm_order(self, callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        user_info = db.get_user(user_id)
        cart_items = db.get_user_cart(user_id)
        data = await state.get_data()

        if not user_info:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", show_alert=True)
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total = sum(item["price"] * item["quantity"] for item in cart_items)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        order_id = db.create_order(
            user_id, total, data['delivery_date'],
            data['delivery_time'], data['delivery_address'], cart_items
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
        admin_message = "üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n"
        admin_message += f"üë§ <b>–û—Ç:</b> @{callback.from_user.username or '–ù–µ—Ç username'}"
        admin_message += f" ({user_info.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
        admin_message += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"

        admin_message += "<b>üõí –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
        for item in cart_items:
            item_total = item["price"] * item["quantity"]
            admin_message += f"‚Ä¢ {item['name']}: {item['quantity']} {item['unit']} √ó {item['price']}—Å—É–º = {item_total}—Å—É–º\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        location = data['delivery_address']
        if location.startswith("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:"):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
                coords = location.replace("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:", "").strip().split(",")
                lat = coords[0].strip()
                lon = coords[1].strip()
                location_url = f"https://www.google.com/maps?q={lat},{lon}"
                admin_message += f"\nüìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> <a href='{location_url}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n"
            except:
                admin_message += f"\nüìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {location}\n"
        else:
            admin_message += f"\nüìç <b>–ê–¥—Ä–µ—Å:</b> {location}\n"

        admin_message += f"\nüí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total}—Å—É–º\n"
        admin_message += f"\nüìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {data['delivery_date']} –≤ {data['delivery_time']}"

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤
            await self.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=admin_message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

        await callback.message.edit_text(
            "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üòä",
            parse_mode='HTML'
        )

        await callback.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

    async def cancel_order(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        await callback.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

    # ===== CALLBACK QUERY HANDLERS =====
    async def back_to_categories_callback(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=get_categories_keyboard()
        )
        await state.set_state(ShoppingStates.selecting_category)

    async def view_cart_inline(self, callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        cart_items = db.get_user_cart(user_id)

        if not cart_items:
            await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        else:
            cart_text = "üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
            total = 0

            for item in cart_items:
                item_total = item["price"] * item["quantity"]
                total += item_total
                cart_text += f"‚Ä¢ {item['name']}: {item['quantity']} {item['unit']} √ó {item['price']}—Å—É–º = {item_total}—Å—É–º\n"

            cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Å—É–º"

            await callback.message.edit_text(cart_text, reply_markup=get_cart_inline_keyboard())
            await state.set_state(ShoppingStates.viewing_cart)

    async def start_checkout_inline(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_for_date)

    async def clear_cart(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        db.clear_cart(user_id)

        await callback.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)
        await callback.message.edit_text(
            "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=get_categories_keyboard()
        )

    # ===== UNKNOWN MESSAGES =====
    async def unknown_message(self, message: types.Message):
        user_id = message.from_user.id
        user = db.get_user(user_id)

        if not user:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                reply_markup=get_main_menu_keyboard()
            )
